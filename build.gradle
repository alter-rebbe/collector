plugins {
  id 'idea'
  id 'com.github.ben-manes.versions'
  id 'scala'
  id 'io.miret.etienne.sass'
}

idea {
  module {
    excludeDirs += [
      file('.idea'),
      file('gradle')
    ]
  }
}

// There is no Java in the project :)
project.gradle.startParameter.excludedTaskNames.add('compileJava')

tasks.withType(ScalaCompile) {
  targetCompatibility = '1.8'
}

description = '19 Kislev Archive'

dependencies {
  implementation "org.opentorah:opentorah-collector:$opentorahVersion"
  implementation "org.opentorah:opentorah-base:$opentorahVersion"
  implementation "org.scala-lang:scala-library:$scalaVersion"
  implementation "com.google.cloud:google-cloud-storage:$gcloudStorageVersion"
  compileOnly    "org.slf4j:slf4j-api:$slf4jVersion"
}

compileSass {
  group = 'publishing'

  sourceDir = project.file ("$rootDir/sass")
  outputDir = project.file ("$rootDir/css")
}

task buildSite(type: JavaExec) {
  group = 'publishing'
  dependsOn(compileSass)

  main = 'org.opentorah.collector.Site'
  args = [rootDir]
  classpath = sourceSets.main.runtimeClasspath
}

task buildAndPrettyPrintSite(type: JavaExec) {
  group = 'publishing'
  dependsOn(compileSass)

  main = 'org.opentorah.collector.Site'
  args = [rootDir, 'prettyPrint']
  classpath = sourceSets.main.runtimeClasspath
}

final String gcloudServiceAccountKey =
  findProperty('gcloudServiceAccountKey') ?:
  System.getenv('gcloudServiceAccountKey') ?:
  "nokey"

task uploadSite(type: JavaExec) {
  group = 'publishing'
  dependsOn(buildSite)

  main = 'org.opentorah.collector.GoogleCloudStorageSynchronizer'
  args = [rootDir, gcloudServiceAccountKey]
  classpath = sourceSets.main.runtimeClasspath
}

task uploadSiteDryRun(type: JavaExec) {
  group = 'publishing'
  dependsOn(buildSite)

  main = 'org.opentorah.collector.GoogleCloudStorageSynchronizer'
  args = [rootDir, gcloudServiceAccountKey, 'dryRun']
  classpath = sourceSets.main.runtimeClasspath
}

task serveSite(type: JavaExec) {
  group = 'publishing'

  main = 'org.opentorah.collector.Service'
  args = ["file://$rootDir/"]
  classpath = sourceSets.main.runtimeClasspath
}

task serveRemoteSite(type: JavaExec) {
  group = 'publishing'

  main = 'org.opentorah.collector.Service'
  args = []
  classpath = sourceSets.main.runtimeClasspath
}
