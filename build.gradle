plugins {
  id 'com.github.ben-manes.versions'
  id 'idea'
  id 'java'
  id 'io.miret.etienne.sass'
}

final String opentorahVersion = '0.1.59'

description = '19 Kislev Archive'

repositories {
  jcenter()
  mavenCentral()
}

idea {
  module {
    excludeDirs += [
      file('.idea'),
      file('gradle'),
      file('/by'),
      file('/collections'),
      file('/names'),
      file('/notes'),
      file('/reports'),
      file('/*.html'),
      file('gradle')
    ]
  }
}

dependencies {
  runtimeOnly "org.opentorah:opentorah-collector:$opentorahVersion"
}

compileSass {
  sourceDir = project.file ("${projectDir}/sass")
  outputDir = project.file ("${projectDir}/assets")
}

task verifySite(type: JavaExec) {
  main = 'org.opentorah.collector.Build'
  args = ["verify", rootDir]
  classpath = sourceSets.main.runtimeClasspath
}
verifySite.dependsOn(compileSass)

task generateSite(type: JavaExec) {
  main = 'org.opentorah.collector.Build'
  args = ["generate", rootDir]
  classpath = sourceSets.main.runtimeClasspath
}
generateSite.dependsOn(compileSass)

task buildSite(type: JavaExec) {
  main = 'org.opentorah.collector.Build'
  args = ["build", rootDir]
  classpath = sourceSets.main.runtimeClasspath
}
buildSite.dependsOn(compileSass)

final String gcloudServiceAccountKey = findProperty('gcloudServiceAccountKey') ?: System.getenv('gcloudServiceAccountKey') ?: "nokey"

task uploadSite(type: JavaExec) {
  main = 'org.opentorah.collector.Build'
  args = ["upload", rootDir, gcloudServiceAccountKey]
  classpath = sourceSets.main.runtimeClasspath
}
uploadSite.dependsOn(generateSite)

task uploadSiteDryRun(type: JavaExec) {
  main = 'org.opentorah.collector.Build'
  args = ["upload", rootDir, gcloudServiceAccountKey, "dryRun"]
  classpath = sourceSets.main.runtimeClasspath
}
uploadSite.dependsOn(generateSite)

task serveSite(type: JavaExec) {
  main = 'org.opentorah.collector.Service'
  environment "STORE", "file://$projectDir/"
  classpath = sourceSets.main.runtimeClasspath
}
serveSite.dependsOn(generateSite)
